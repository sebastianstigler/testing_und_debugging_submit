#!/usr/bin/python3
# vim: ft=python et ai ts=4

import getpass
import configparser
import os
import subprocess
import argparse
import tempfile
import re
import sys
import shutil
import time

authFile = "~/.gistsrc"
globalConfig = "~/.submitrc"
localConfig = "submit.cfg"

def parseCMD():
    parser = argparse.ArgumentParser(description='Homework submition script')
    parser.add_argument('-a','--authorize',dest='authorize', default=False,
            action='store_true',
            help="Authorize the 'gists' backend for upload to github." )
    parser.add_argument('-ne','--no_encryption',dest='encrypt', default=True,
            action='store_false',
            help="Don't encrypt files befor upload (default: encrypt files).")
    args = parser.parse_args()
    return args

def checkauth(authFile=authFile):
    """Check if gists is already authorized.
       return username or None (when not authorized)"""
    config = configparser.ConfigParser()
    config.read(os.path.expanduser(authFile))
    if not "credentials" in config or not "user" in config["credentials"]:
        return None
    return config["credentials"]["user"]

def authorize():
    chk = 'n'
    while chk != 'y':
       user = input("github username: ")
       chk = input("Do you want to authorize as '%s' [y/N]? " %(user)).lower()
    passwd = getpass.getpass("Password for '%s': " %(user))
    
    res = subprocess.Popen("gists authorize -u %s -c %s" % (user, passwd), 
                           shell=True,  stdout=subprocess.PIPE, 
                           stderr=subprocess.PIPE)
    res.wait()
    
    output=[]
    for line in res.stdout.readlines():
        output.append(line.decode("utf-8").strip())

    # Error: Could not get an authorization token. Github reason: 'Bad credentials'
    # Authentication token written in '~/.gistsrc'
    OK_AUTH = "^Authentication token written"
    r1 = re.compile(OK_AUTH)
    if len(r1.findall(output[0])) > 0:
        return user
    else:
        print("Error in authorize() function:")
        print("\n".join(output), file=sys.stderr)
        exit(1)

def checkglobalconfig(globalConfig=globalConfig):
    config = configparser.ConfigParser()
    if os.path.isfile(os.path.expanduser(globalConfig)):
        config.read(os.path.expanduser(globalConfig))
    if not "encrypt" in config or not "user" in config["encrypt"]:
        config["encrypt"]={}
        config["encrypt"]["user"]="sebastian.stigler@htw-aalen.de"
        with open(os.path.expanduser(globalConfig), "w") as configfile:
            config.write(configfile)
    return config

def checklocalconfig(localConfig=localConfig):
    config = configparser.ConfigParser()
    if not os.path.isfile(localConfig):
        print("Error: File '%s' not found." %(localConfig),
              "Make sure, that you call 'submit' in the",
              "directory which contains the '%s' file." %(localConfig), 
              file=sys.stderr, sep="\n")
        exit(1)
    config.read(localConfig)
    if not "Uebung" in config or not "Abgeben" in config:
        print("Error: The file '%s' has the wrong format." %(localConfig),
              "Make sure it is the file provided by your current homework.",
              "If the file was the one, provided by the zip file of",
              "your current homework, open a new issue at:",
              "https://github.com/sebastianstigler/testing_und_debugging_submit/issues",
              file=sys.stderr, sep="\n")
    err=False
    for token in config["Abgeben"]:
        if not os.path.isfile(config["Abgeben"][token]):
            print("Error: File '%s' should be submitted but is missing," %(config["Abgeben"][token]),
                  file=sys.stderr)
            err=True
    if err:
        exit(1)
    return config

def encrypt(srcfile,dstfile,dir,user):
    sf = os.path.join(dir,srcfile)
    df = os.path.join(dir,dstfile)
    if not os.path.isdir(dir):
        print("Error: Directory '%s' does not exist."%(dir), file=sys.stderr)
        exit(1)
    if not os.path.isfile(sf):
        print("Error: File '%s' does not exist." %(sf), file=sys.stderr)
        exit(1)
    res = subprocess.Popen("gpg --always-trust --output \"%s\" -a -e -r \"%s\" --batch --yes \"%s\"" % (df,user,sf), 
                           shell=True,  stdout=subprocess.PIPE, 
                           stderr=subprocess.PIPE)
    res.wait()
    if res.returncode != 0:
        output=[]
        for line in res.stdout.readlines():
            output.append(line.decode("utf-8").strip())
        for line in res.stderr.readlines():
            output.append(line.decode("utf-8").strip())
        print("Error in encrypt() function:")
        print("\n".join(output), file=sys.stderr)
        exit(1)
    
def submit(files, dir, desc):
    if not os.path.isdir(dir):
        print("Error in submit() function:", file=sys.stderr)
        print("Error: Directory '%s' does not exist."%(dir), file=sys.stderr)
        exit(1)
    for file in files:
        sf = os.path.join(dir,file)
        if not os.path.isfile(sf):
            print("Error in submit() function:", file=sys.stderr)
            print("Error: File '%s' does not exist." %(sf), file=sys.stderr)
            exit(1)
    res = subprocess.Popen("gists create -p -d \"%s\" -f %s -i \"%s\"" % (desc, " ".join(files), dir), 
                           shell=True,  stdout=subprocess.PIPE, 
                           stderr=subprocess.PIPE)
    res.wait()
    
    output=[]
    for line in res.stdout.readlines():
        output.append(line.decode("utf-8").strip())
    for line in res.stderr.readlines():
        output.append(line.decode("utf-8").strip())

    OK_1 = "^---"
    OK_2 = "^Gist"
    ERR = "^Traceback"
    r1 = re.compile(OK_1)
    r2 = re.compile(OK_2)
    r3 = re.compile(ERR)
    print("\n".join(output))
    if not (len(r1.findall(output[0])) > 0) or \
       not (len(r2.findall(output[1])) > 0) or \
       (len(r3.findall(output[0])) > 0):
        print("", "Error in submission. Try again.",
              "If the error persist, open a new issue at:",
              "https://github.com/sebastianstigler/testing_und_debugging_submit/issues",
              file=sys.stderr, sep="\n")
        exit(1)
    else:
        print("\nSubmission successful.")

def checkinternet():
    res = subprocess.Popen("ping -c1 github.com", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    res.wait()
    if res.returncode != 0:
        print("Error: No connection to github.com.",
              "You need a activ internet connetion for submission!",
              file=sys.stderr, sep ="\n")
        exit(1)

def copyfiles(files, dir):
    if not os.path.isdir(dir):
        print("Error in copyfiles() function:", file=sys.stderr)
        print("Error: Directory '%s' does not exist."%(dir), file=sys.stderr)
        exit(1)
    for file in files:
        sf = os.path.join(os.getcwd(),file)
        if not os.path.isfile(sf):
            print("Error in copyfiles() function:", file=sys.stderr)
            print("Error: File '%s' does not exist." %(sf), file=sys.stderr)
            exit(1)
    for file in files:
        try:
            shutil.copy(os.path.join(os.getcwd(),file), dir)
        except (IOError, os.error) as why:
            print("Error in copyfiles() function:", str(why), file=sys.stderr, sep="\n")
            exit(1)

if __name__ == "__main__":
    checkinternet()
    cmd = parseCMD()
    user = checkauth()
    if user == None or cmd.authorize:
        user = authorize() 
    gconfig = checkglobalconfig()
    lconfig = checklocalconfig()

    with tempfile.TemporaryDirectory() as dir:
        files = list(lconfig["Abgeben"].values())
        copyfiles(files, dir)
        if cmd.encrypt:
            files=[]
            for file in lconfig["Abgeben"].values():
                encrypt(file, file+".asc", dir, gconfig["encrypt"]["user"])
                files.append(file+".asc")
        lconfig["submit"] = {}
        lconfig["submit"]["encrypt"]=str(cmd.encrypt)
        lconfig["submit"]["time"]=str(int(time.time()))
        with open(os.path.join(dir,localConfig), "w") as configfile:
            lconfig.write(configfile)
        files.insert(0,localConfig)
        desc = "TuD Uebung %s, submit %s" %(lconfig["Uebung"]["aufgabe"], lconfig["submit"]["time"])
        submit(files,dir, desc )
